services:

 eurekaserver:
   build: ./eurekaserver
   container_name: eurekaserver
   ports:
     - "8761:8761"
   networks:
     - microservices-net


 item-service:
   build: ./item-service
   container_name: item-service
   ports:
     - "6004:6004"
   environment:
     - spring.datasource.url=jdbc:mysql://mysql:3306/dbuts_item
     - spring.datasource.username=root
     - spring.datasource.password=root_password
     - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
     - LOGSTASH_HOST=logstash:5000
   depends_on:
     - eurekaserver
     - mysql
   networks:
     - microservices-net


 user-service:
   build: ./user-service
   container_name: user-service
   ports:
     - "6005:6005"
   environment:
     - spring.datasource.url=jdbc:mysql://mysql:3306/dbuts_user
     - spring.datasource.username=root
     - spring.datasource.password=root_password
     - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
     - LOGSTASH_HOST=logstash:5000
   depends_on:
     - eurekaserver
     - mysql
   networks:
     - microservices-net


 payment-service:
   build: ./payment-service
   container_name: payment-service
   ports:
     - "6006:6006"
   environment:
     - spring.datasource.url=jdbc:mysql://mysql:3306/dbuts_payment?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
     - spring.datasource.username=root
     - spring.datasource.password=root_password
     - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
     - LOGSTASH_HOST=logstash:5000
   depends_on:
     - eurekaserver
     - mysql
   networks:
     - microservices-net


 api-gateway:
   build: ./api-gateway
   container_name: api-gateway
   ports:
     - "6000:6000"
   environment:
     - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
     - LOGSTASH_HOST=logstash:5000
   depends_on:
     - eurekaserver
   networks:
     - microservices-net


 mysql:
   image: mysql:8.0
   container_name: mysql
   environment:
     MYSQL_ROOT_PASSWORD: root_password
   volumes:
     - ./mysql/init:/docker-entrypoint-initdb.d  # Mount script ke direktori init
   ports:
     - "3306:3306"
   networks:
     - microservices-net


 phpmyadmin:
   image: phpmyadmin/phpmyadmin
   container_name: phpmyadmin
   environment:
     PMA_HOST: mysql  # Nama service MySQL di Docker Compose
     PMA_PORT: 3306
     PMA_USER: root
     PMA_PASSWORD: root_password
   ports:
     - "8086:80"  # Akses phpMyAdmin via port 8086
   networks:
     - microservices-net
   depends_on:
     - mysql


 prometheus:
   image: prom/prometheus
   container_name: prometheus
   ports:
     - "9090:9090"
   volumes:
     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
   networks:
     - microservices-net


 node-exporter:
   image: prom/node-exporter
   container_name: node-exporter
   ports:
     - "9100:9100"
   networks:
     - microservices-net

 elasticsearch:
   image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
   container_name: elasticsearch
   environment:
     - discovery.type=single-node
     - xpack.security.enabled=false
     - bootstrap.memory_lock=true
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
   ports:
     - "9200:9200"
   volumes:
     - esdata:/usr/share/elasticsearch/data
   networks:
     - microservices-net


 logstash:
   image: docker.elastic.co/logstash/logstash:8.12.0
   container_name: logstash
   depends_on:
     - elasticsearch
   ports:
     - "5044:5044"      # Beat input (optional)
     - "5001:5000"      # TCP input (Spring Boot logs via logstashTcpSocketAppender)
     - "9600:9600"      # Logstash monitoring API
   volumes:
     - ./logstash/pipeline:/usr/share/logstash/pipeline
   networks:
     - microservices-net

 kibana:
   image: docker.elastic.co/kibana/kibana:8.12.0
   container_name: kibana
   ports:
     - "5601:5601"
   environment:
     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
   depends_on:
     - elasticsearch
   networks:
     - microservices-net

volumes:
 esdata:

networks:
 microservices-net:
   driver: bridge




